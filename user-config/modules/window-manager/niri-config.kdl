// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            layout "us,jp"
            variant "dvorak,"
            // NOTE: Because a lot of input tweaks are made by Xremap, these GTK
            // flags are not used.
            // options "grp:win_space_toggle,altwin:swap_alt_win,compose:ralt,ctrl:nocaps"
            // Except that Super + Space is used for language switch.
            options "grp:win_space_toggle"
        }
        repeat-rate 75
        repeat-delay 195
        track-layout "global"
    }

    touchpad {
        // off
        tap
        // dwt
        // dwtp
        natural-scroll
        accel-speed 0.2
        accel-profile "flat"
        scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    // warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // focus-follows-mouse
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
output "eDP-1" {
    // Uncomment this line to disable this output.
    // off

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    mode "2880x1800@120.000"

    // You can use integer or fractional scale, for example use 1.5 for 150% scale.
    scale 1.666667

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale and rotation has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // If the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=1920 y=0
}
output "eDP-2" {
    // Uncomment this line to disable this output.
    // off

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    mode "2880x1800@120.000"

    // You can use integer or fractional scale, for example use 1.5 for 150% scale.
    scale 1.666667

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale and rotation has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // If the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=1920 y=0
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    // Set gaps around windows in logical pixels.
    gaps 16

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it does not fit
    //   together with the previously focused column.
    center-focused-column "on-overflow"

    preset-column-widths {
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
        proportion 0.75

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    default-column-width {}

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you do not like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    focus-ring {
        // Focus ring is disabled as border is used instead (border is always
        // shown, whereas focus ring is only applied to the focused window).
        off

        // How many logical pixels the ring extends out from the windows.
        width 1

        // Colors can be set in a variety of ways:
        // - CSS named colors: "red"
        // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
        // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

        // Color of the ring on the active monitor.
        // active-color "#7fc8ff22"

        // Color of the ring on inactive monitors.
        // inactive-color "#000000"

        // You can also use gradients. They take precedence over solid colors.
        // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
        // The angle is the same as in linear-gradient, and is optional,
        // defaulting to 180 (top-to-bottom gradient).
        // You can use any CSS linear-gradient tool on the web to set these up.
        //
        active-gradient to="#45CB85" from="#344966" angle=75

        // You can also color the gradient relative to the entire view
        // of the workspace, rather than relative to just the window itself.
        // To do that, set relative-to="workspace-view".
        //
        inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    border {
        // off

        width 1

        active-gradient to="#0081AF" from="#344966" angle=75 relative-to="workspace-view"
        inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some rounded corners.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0
}


////============================================================
///   Start-up and Environment
//==============================================================

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.
// spawn-at-startup "alacritty" "-e" "fish"
spawn-at-startup "swww-daemon"
spawn-at-startup "sh" "-c" "ags -c ~/.config/ags-notification/config.js -b notification"
spawn-at-startup "maestral" "start" // Hack

environment {
    NIXOS_OZONE_WL "1"
}


////============================================================
///   Window Rules
//==============================================================
// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

// Default window rule
window-rule {
    opacity 0.95
    clip-to-geometry true
    geometry-corner-radius 7
    draw-border-with-background false
}

// Work around WezTerm s initial configure bug
// by setting an empty default-column-width.
window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

window-rule {
    match app-id="emacs"
    default-column-width { proportion 0.9; }
}

window-rule {
    match app-id="slack"
    default-column-width { proportion 0.9; }
}


// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

// Help menu, suppress at startup.
hotkey-overlay {
    skip-at-startup
}

////============================================================
///   Key Bindings
//==============================================================
binds {
    ////----------------------------------------
    ///   Focus Related
    //------------------------------------------
    Alt+Space { spawn "fuzzel"; }
    Super+Alt+N { spawn "swaylock"; } // Dvorak L

    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

    // Super + Q on Dvorak
    Super+Apostrophe { close-window; }

    ////----------------------------------------
    ///   Focus Related
    //------------------------------------------
    Super+Tab { focus-column-right-or-first; }
    Super+Shift+Tab { focus-column-left-or-last; }

    // NOTE: These key bindings are designed so that they are difficult to use,
    // and should not conflict with other key bindings. In order to use this
    // in real scenario, I would need key remapping solutions like Xremap.
    Ctrl+Shift+Alt+Super+Left  { focus-column-left; }
    Ctrl+Shift+Alt+Super+Right { focus-column-right; }
    Ctrl+Shift+Alt+Super+Down  { focus-workspace-down; }
    Ctrl+Shift+Alt+Super+Up    { focus-workspace-up; }
    // These are somewhat easy alternative when remap is not working for any
    // reason.
    Ctrl+Home  { focus-column-left; }
    Ctrl+End   { focus-column-right; }
    Ctrl+Next  { focus-workspace-down; }
    Ctrl+Prior { focus-workspace-up; }

    Ctrl+Alt+1 { focus-workspace 1; }
    Ctrl+Alt+2 { focus-workspace 2; }
    Ctrl+Alt+3 { focus-workspace 3; }
    Ctrl+Alt+4 { focus-workspace 4; }
    Ctrl+Alt+5 { focus-workspace 5; }
    Ctrl+Alt+6 { focus-workspace 6; }
    Ctrl+Alt+7 { focus-workspace 7; }
    Ctrl+Alt+8 { focus-workspace 8; }
    Ctrl+Alt+9 { focus-workspace 9; }

    ////----------------------------------------
    ///   Size Related
    //------------------------------------------
    // NOTE: These key bindings are designed so that they are difficult to use,
    // and should not conflict with other key bindings. In order to use this
    // in real scenario, I would need key remapping solutions like Xremap.
    Ctrl+Shift+Alt+Left   { set-column-width "-5%"; }
    Ctrl+Shift+Alt+Right  { set-column-width "+5%"; }
    // Currently not used
    // Ctrl+Shift+Alt+Down   { set-window-height "+5%"; }
    // Ctrl+Shift+Alt+Up     { set-window-height "-5%"; }
    Ctrl+Alt+Minus        { set-window-height "-5%"; }
    Ctrl+Alt+Equal        { set-window-height "+5%"; }

    Ctrl+Alt+Return     { maximize-column; }
    Ctrl+Alt+Shift+F    { fullscreen-window; }
    Ctrl+Alt+C          { center-column; }
    Ctrl+Alt+Space      { switch-preset-column-width; }
    // Mod+Shift+R { reset-window-height; }

    ////----------------------------------------
    ///   Move Related
    //------------------------------------------
    // NOTE: These key bindings are designed so that they are difficult to use,
    // and should not conflict with other key bindings. In order to use this
    // in real scenario, I would need key remapping solutions like Xremap.
    Ctrl+Shift+Super+Left  { move-column-left; }
    Ctrl+Shift+Super+Right { move-column-right; }
    Ctrl+Shift+Super+Down  { move-window-down-or-to-workspace-down; }
    Ctrl+Shift+Super+Up    { move-window-up-or-to-workspace-up; }

    Ctrl+Super+Comma  { consume-window-into-column; }
    Ctrl+Super+Period { expel-window-from-column; }

    ////----------------------------------------
    ///   Other
    //------------------------------------------
    Print { screenshot; }
    Super+Shift+3 { screenshot; }
    Super+Shift+4 { screenshot-window; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // Quit Niri -- this prompts before exiting.
    Super+Shift+M { quit; }
}
